.. _zigbee-index:

zsed_demo
==================

总览
------

本示例主要介绍如何使用BL702L ZSED Sensor Demo。

Demo介绍
-----------

- ZSED Sensor Demo主要是ZigBee Sleepy End device作为sensor的简单应用例子，供应用参考。在该Demo中，低功耗模式是PDS31。
  ZSED上电后依次执行如下流程：

  1. 初始化ZigBee。
 
  2. 注册cluster 
 
  3. 使能低功耗模式。使能后，在idle task中会检查各模块是否同意系统进入pds31低功耗模式，以及sleep的时间。如果可以进低功耗，则在idle task中进pds31低功耗模式。

  4. Network discovery。
 
  5. 当扫到permit join打开的网络，会自动加入网络中


ZSED工作模式
-----------

- ZSED唤醒后，可以工作在以下2种模式。

  1) Simple模式: 该模式跑在rom中。 ZSED通过LMAC154与其Parent通信。

  2) Full Stack模式: 该模式跑在Flash上。ZSED通过ZigBee协议栈与其Parent通信。

  ZSED唤醒后，首先进入Simple模式，在Simple模式下判断是否需要回到Full Stack模式，如果不需要回到Full Stack模式，ZSED与其parent通信完后直接在Simple模式下进入PDS31。
  目前，该Demo在Simple模式下，如果以下任一条件满足，则ZSED需要回到Full Stack模式。

  1) Freertos睡眠时间结束。

  2) ZigBee stack睡眠时间结束。例如Parent给ZSED配置了周期性的attribute report，report时间点到了，会恢复Full Stack发attribute report。

  3) ZSED收到了其Parent发来的数据包。

  4) ZSED给Parent发了Data Request后，没有收到Parent的Mac Ack。

  5) PDS31被GPIO唤醒。


低功耗流程
-----------
- 打开低功耗功能

  通过zb_pds_enable API来打开ZSED低功耗的功能。
  
  ``void zb_pds_enable (uint8_t enable)``
  
  其中enable = 1，表示打开低功耗功能，ZSED在空闲的时候可以进入PDS31低功耗模式；enable = 0，表示ZSED空闲的时候不进入低功耗模式。

- ZSED进入低功耗的流程

  SDK使用了Freertos。在Freertos的idle task中检查各模块能否进入低功耗模式。
  
  1) 若Freertos可以睡眠，则继续判断ZigBee是否可以睡眠。若ZigBee可以睡眠，则获取ZigBee可以睡眠的时间。
  
  2) 最终系统睡眠的时间在Freertos可睡眠得时间与ZigBee可睡眠时间两者间取较小值。进入PDS31后，ocRam不掉电。
  
     如果应用层在系统进入pds31前有事情要做，可以在如下函数中实现。
	   
     ``void zbapp_action_before_sleep_callback (void)``

- ZSED唤醒后的流程

  目前Demo中，pds31在睡眠时间结束后，自动唤醒。
  
  1) 醒来后，系统进入Fast Boot模式，该模式下没有恢复Freertos，ZSED工作在Simple模式。在Simple模式下，判断是否要恢复Full Stack。详情见1.1章节。
  
  2) 如不需要恢复Full Stack，ZSED与其Parent通信完后直接在Simple模式下进入PDS31。如需要恢复Full Stack，则恢复Freertos，系统回到idle task中接着跑。待下一次从Full Stack模式下进入PDS31。
         
     如果应用层在系统从pds31醒来后有事情做，可以在如下函数中实现.
	 
     ``void zbapp_action_after_wakeup_callback (void)``


测试准备
-----------
- BL702L ZSED

  使用SDK customer_app/bl702l_demo_product/bl702l_demo_sensor_zsed目录下的genromapzsedstartupwithpds31脚本编译出ZSED固件。
  
  然后用BL702L烧录工具将生成的bl702l_demo_sensor_zsed.bin烧录到ZSED。

  注意，初次烧录，flash tool上Chip Erase选择true。后续烧录，如需擦除ZigBee网络信息，Chip Erase选true，否则选false。

  烧写完后，按ZSED上的reset键。


- BL702 ZC

  使用SDK customer_app/bl702_demo_event目录下的genzcstartup脚本编译出ZC固件。
  
  然后用BL702烧录工具将生成的bl702_demo_event.bin烧录到ZC。

  注意，初次烧录，flash tool上Chip Erase选择true。后续烧录，如需擦除ZigBee网络信息，Chip Erase选true，否则选false。

  烧写完后，按ZC上的reset键。


测试流程
-----------
- ZSED加入到ZC网络中

  - ZC建立ZigBee网络
  
    在ZC端输入如下CLI命令，参数1表示网络的channel，参数2表示网络pan id。
	
    ``zb_form 16 0x1234``
    
    网络建立成功后，ZC会有如下打印：
    
    ``zb_startup_complete_cb: 0x0, 0x0``
    
    ``Start as ZC: 0x 0``
	
  - 打开ZC的permit join
  
    ``zb_nwk_permit_join 200``

  - ZSED上电后会自动做network discovery，发现有开放的网络会自动加入。
    
    这时ZSED发现ZC的网络permit join已打开，会加入到ZC网络中。加入到网络中后，ZSED会有如下打印：
    
    ``Start as ZSED: 0x81c4``
	
  - ZSED成功加入到ZC网络后，可以在ZC端使用如下CLI命令关掉ZC的permit join，禁止其他节点加入网络。
    
    ``zb_nwk_permit_join 0``


- IAS ZONE Enroll

  ZC端输入如下命令，使ZC将其IEEE Address写到ZSED端IAS Zone cluster的IAS_CIE_Address attribute。ZC将发送IAS Zone: Write Attribute包给ZSED。
  
  请参考SDK中zb_zcl_write命令的介绍。
  
  ``zb_zcl_write 0x81c4 1 1 0x0500 0x0010 0xf0 00007c090042e8b4``

  ZSED端在收到ZC的IAS Zone: Write Attribute包去写IAS_CIE_Address attribute后，回复IAS Zone: Write Attribute Response。
  
  ZSED会自动发送IAS Zone: Zone Enroll Request给ZC。
  
  ZSED收到ZC回复的IAS Zone: Zone Enroll Response，若payload中status是success，ZSED端应用层会起一个timer，定期向ZC report IAS Zone Status。参考如下函数。
  
  ``static void zb_createIASReportTimer(void)``

  
- ZC给ZSED配置attribute report

  例如，配置ZSED的General Power Configuration Cluster每32s report一次battery voltage attribute的值。在ZC端输入如下CLI命令，
  
  ``zb_zdp_bind 0x81c4 0x0001 1 00004789de05b918 3 1 0000dc070042e8b4`` 
  
  ``zb_zcl_cfg_report 0x81c4 1 1 0x0001 0 0x0020 0x20 0x0020 0x0020 0``
  
  请参考SDK中对zb_zdp_bind及zb_zcl_cfg_report命令的详细介绍。
  
  配置成功后，ZSED会32s 向ZC report一次battery voltage。









